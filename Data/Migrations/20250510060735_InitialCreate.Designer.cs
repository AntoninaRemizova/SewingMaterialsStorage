// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SewingMaterialsStorage.Data;

#nullable disable

namespace SewingMaterialsStorage.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250510060735_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SewingMaterialsStorage.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color_name");

                    b.HasKey("ColorId")
                        .HasName("colors_pkey");

                    b.HasIndex("ColorName")
                        .IsUnique()
                        .HasDatabaseName("colors_color_name_key");

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Composition", b =>
                {
                    b.Property<int>("CompositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("composition_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CompositionId"));

                    b.Property<string>("CompositionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("composition_name");

                    b.HasKey("CompositionId")
                        .HasName("compositions_pkey");

                    b.HasIndex("CompositionName")
                        .IsUnique()
                        .HasDatabaseName("compositions_composition_name_key");

                    b.ToTable("compositions", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Consumption", b =>
                {
                    b.Property<int>("ConsumptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("consumption_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ConsumptionId"));

                    b.Property<DateTime>("ConsumptionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("consumption_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("ConsumptionId")
                        .HasName("consumptions_pkey");

                    b.HasIndex("MaterialId");

                    b.ToTable("consumptions", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country_name");

                    b.HasKey("CountryId")
                        .HasName("countries_pkey");

                    b.HasIndex("CountryName")
                        .IsUnique()
                        .HasDatabaseName("countries_country_name_key");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("manufacturer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ManufacturerId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("manufacturer_name");

                    b.HasKey("ManufacturerId")
                        .HasName("manufacturers_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("ManufacturerName")
                        .IsUnique()
                        .HasDatabaseName("manufacturers_manufacturer_name_key");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("article");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("material_name");

                    b.Property<int>("MinThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("min_threshold");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("PricePerUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("price_per_unit");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("MaterialId")
                        .HasName("materials_pkey");

                    b.HasIndex("Article")
                        .IsUnique()
                        .HasDatabaseName("materials_article_key");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("TypeId");

                    b.ToTable("materials", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialButton", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<decimal>("ButtonSize")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("button_size");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("shape");

                    b.HasKey("MaterialId")
                        .HasName("material_buttons_pkey");

                    b.ToTable("material_buttons", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialColor", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    b.HasKey("MaterialId", "ColorId")
                        .HasName("material_colors_pkey");

                    b.HasIndex("ColorId");

                    b.ToTable("material_colors", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialComposition", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<int>("CompositionId")
                        .HasColumnType("integer")
                        .HasColumnName("composition_id");

                    b.HasKey("MaterialId", "CompositionId")
                        .HasName("material_compositions_pkey");

                    b.HasIndex("CompositionId");

                    b.ToTable("material_compositions", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialFabric", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<decimal>("Density")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("density");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("width");

                    b.HasKey("MaterialId")
                        .HasName("material_fabrics_pkey");

                    b.ToTable("material_fabrics", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialThread", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<int>("LengthPerSpool")
                        .HasColumnType("integer")
                        .HasColumnName("length_per_spool");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("thickness");

                    b.HasKey("MaterialId")
                        .HasName("material_threads_pkey");

                    b.ToTable("material_threads", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId")
                        .HasName("material_types_pkey");

                    b.HasIndex("TypeName")
                        .IsUnique()
                        .HasDatabaseName("material_types_type_name_key");

                    b.ToTable("material_types", null, t =>
                        {
                            t.HasCheckConstraint("ck_material_types_type_name", "type_name IN ('ткань', 'нитки', 'молния', 'пуговица')");
                        });
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialZipper", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<decimal>("ZipperLength")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("zipper_length");

                    b.Property<string>("ZipperType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("zipper_type");

                    b.HasKey("MaterialId")
                        .HasName("material_zippers_pkey");

                    b.ToTable("material_zippers", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("supply_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SupplyId"));

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer")
                        .HasColumnName("material_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("SupplyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("supply_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("SupplyId")
                        .HasName("supplies_pkey");

                    b.HasIndex("MaterialId");

                    b.ToTable("supplies", (string)null);
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Consumption", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Material", "Material")
                        .WithMany("Consumptions")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("consumptions_material_id_fkey");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Manufacturer", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("manufacturers_country_id_fkey");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Material", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("materials_manufacturer_id_fkey");

                    b.HasOne("SewingMaterialsStorage.Models.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("materials_type_id_fkey");

                    b.Navigation("Manufacturer");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialButton", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Material", "Material")
                        .WithOne("ButtonDetails")
                        .HasForeignKey("SewingMaterialsStorage.Models.MaterialButton", "MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("material_buttons_material_id_fkey");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialColor", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("material_colors_color_id_fkey");

                    b.HasOne("SewingMaterialsStorage.Models.Material", "Material")
                        .WithMany("Colors")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("material_colors_material_id_fkey");

                    b.Navigation("Color");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialComposition", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Composition", "Composition")
                        .WithMany()
                        .HasForeignKey("CompositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("material_compositions_composition_id_fkey");

                    b.HasOne("SewingMaterialsStorage.Models.Material", "Material")
                        .WithMany("Compositions")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("material_compositions_material_id_fkey");

                    b.Navigation("Composition");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialFabric", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Material", "Material")
                        .WithOne("FabricDetails")
                        .HasForeignKey("SewingMaterialsStorage.Models.MaterialFabric", "MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("material_fabrics_material_id_fkey");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialThread", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Material", "Material")
                        .WithOne("ThreadDetails")
                        .HasForeignKey("SewingMaterialsStorage.Models.MaterialThread", "MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("material_threads_material_id_fkey");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.MaterialZipper", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Material", "Material")
                        .WithOne("ZipperDetails")
                        .HasForeignKey("SewingMaterialsStorage.Models.MaterialZipper", "MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("material_zippers_material_id_fkey");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Supply", b =>
                {
                    b.HasOne("SewingMaterialsStorage.Models.Material", "Material")
                        .WithMany("Supplies")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("supplies_material_id_fkey");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("SewingMaterialsStorage.Models.Material", b =>
                {
                    b.Navigation("ButtonDetails")
                        .IsRequired();

                    b.Navigation("Colors");

                    b.Navigation("Compositions");

                    b.Navigation("Consumptions");

                    b.Navigation("FabricDetails")
                        .IsRequired();

                    b.Navigation("Supplies");

                    b.Navigation("ThreadDetails")
                        .IsRequired();

                    b.Navigation("ZipperDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
